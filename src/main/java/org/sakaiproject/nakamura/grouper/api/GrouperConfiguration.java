/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.sakaiproject.nakamura.grouper.api;

import java.net.URL;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import org.apache.commons.httpclient.HttpClient;

/**
 * A central place to hold configuration about a remote Grouper installation.
 * This is used during the sync and batch event processing.
 */
public interface GrouperConfiguration {

	/**
	 * @return the Grouper WS version number to use.
	 */
	public abstract String getWsVersion();

	/**
	 * @return the username in Grouper
	 */
	public abstract String getUsername();

	/**
	 * @return the username's password in Grouper
	 */
	public abstract String getPassword();

	/**
	 * http://localhost:9090/grouper-ws
	 * @return the {@link URL} of the Grouper WS
	 */
	public abstract URL getUrl();

	/**
	 * Useful for {@link HttpClient} connections.
	 * http://localhost:9090/grouper-ws/servicesRest
	 * @return a {@link String} representation of the url to the Grouper WS REST services.
	 */
	public abstract String getRestWsUrlString();

	/**
	 * How long to wait for an {@link HttpClient} request to fail.
	 * @return
	 */
	public abstract int getHttpTimeout();

	/**
	 * Don't process events generated by this user.
	 * Prevents the dreaded "event-loop" where we keep informing Grouper of something it just did.
	 * @return the userId to ignore.
	 */
	public abstract String getIgnoredUserId();

	/** 
	 * Ignore groups that one match these patterns.
	 * @return the {@link Pattern}s to ignore.
	 */
	public abstract String[] getIgnoredGroups();

	/**
	 * Groups in nakamura that have some special meaning.
	 * These are usually the -managers, -ta, and -lecturers.
	 * @return
	 */
	public abstract String[] getPseudoGroupSuffixes();

	/**
	 * @param groupType
	 * @return the base stem to write to for this type of group.
	 */
	public abstract String getBaseStem(String groupType);

	/**
	 * @return The group types for creating course groups in grouper.
	 */
	public abstract Set<String> getGroupTypes();

	/**
	 * @return a map of extension names to use to override the poseudogroup extensions
	 */
	public abstract Map<String,String> getExtensionOverrides();
}